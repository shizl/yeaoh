<?php
// $Id: spritesheets.module,v 1.1 2011/01/11 17:41:21 tomfriedhof Exp $

/**
 * @file
 * Aggregate images into a single sheet to reduce page load times
 *
 * Spritesheets reads CSS files for images and renders them all into a
 * single sheet, adding a CSS stylesheet overriding relevant selectors
 * to use the compiled image instead.
 *
 * spritesheets.module contains drupal hooks and the settings form
 *
 * spritesheets.inc contains functions related to rendering the sheet
 *
 */

/**
 * Implements hook_menu().
 */
function spritesheets_menu() {
  $items['admin/config/spritesheets'] = array(
    'title' => 'Spritesheets',
    'description' => 'Spritesheet settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spritesheets_settings_form'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Implements hook_preprocess_page().
 */
function spritesheets_preprocess_page($vars) {
  if ( _spritesheets_is_enabled() ) drupal_add_css(spritesheets_compile());
}

/**
 * Implements hook_theme().
 */
function spritesheets_theme() {
  if ( _spritesheets_is_enabled() ) spritesheets_compile(true);
  return array();
}

/**
 * Implements hook_css_alter().
 */
function spritesheets_css_alter(&$css) {
  if ( !_spritesheets_is_enabled() || !array_key_exists($k=spritesheets_spritesheet_path('css'), $css) ) return;
  $css[$k]['weight'] = 100;
}


/**
 * Implements hook_form().
 */
function spritesheets_settings_form($form, &$form_state) {
  $input = $form_state['input'];

  $form['#attached'] = array(
    'css' => array(
      drupal_get_path('module', 'spritesheets') . '/spritesheets.css' => array( 'type' => 'file' ),
    ),
  );

  if ( file_exists(spritesheets_spritesheet_path()) ) {
    $form['preview'] = array(
      '#type' => 'fieldset',
      '#title' => 'Spritesheet Preview',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      'preview-image' => array(
        '#type' => 'markup',
        '#markup' => '<img src="/' . spritesheets_spritesheet_path() . '" />',
      ),
    );
  }

  $form['basic'] = array(
    '#type' => 'fieldset',
    '#title' => t('Basic Settings')
  );
  $form['basic']['enabled'] = array(
    '#title' => t('Enable Spritesheets'),
    '#type' => 'checkbox',
    '#value' => variable_get('spritesheets_enabled'),
    '#description' => 'Let the magic happen',
  );
  $form['basic']['optimize'] = array(
    '#title' => t('Optimize Output File'),
    '#type' => 'checkbox',
    '#value' => variable_get('spritesheets_optimize'),
    '#description' => 'Automatically optimize and compress the output spritesheet',
  );
  if ( !file_exists("sites/all/libraries/pngcrush/pngcrush") ) {
    $form['basic']['optimize']['#disabled'] = TRUE;
    $form['basic']['optimize']['#value'] = FALSE;
    if ( !$input ) drupal_set_message(t("Optimization depends on an third party tool provided here: <a href=\"http://pmt.sourceforge.net/pngcrush\">pngcrush</a>. The binary should have the path sites/all/libraries/pngcrush/pngcrush"));
  }
  $form['basic']['debug'] = array(
    '#title' => t('Bounding-box Debug Mode'),
    '#type' => 'checkbox',
    '#value' => variable_get('spritesheets_debug'),
    '#description' => 'Draws red bounding boxes over each image to help debug sprite placement',
  );
  $form['basic']['paths'] = array(
    '#prefix' => '<div id="edit-path-alt"><table><thead><th>' . t('Folders') . '</th></thead><tbody>',
    '#type' => 'markup',
    '#suffix' => "</tbody></table><div class=\"description\">Spritesheets scans these directories for CSS files to find images in use by your site. <br/> Recommended: sites/all/themes, sites/all/modules/custom</div></div>",
  );

  $paths = variable_get('spritesheets_paths', array(''));
  $paths[] = '';

  foreach ( $paths as $k => $path ) {
    $form['basic']['paths'][$k] = array(
      '#id' => 'edit-paths-' . $k,
      '#name' => 'paths[]',
      '#prefix' => '<tr class="' . ( $k % 2 ? 'even' : 'odd' ) . '"><td>',
      '#type' => 'textfield',
      '#default_value' => $input && isset($input['paths'][$k]) ? $input['paths'][$k] : $path,
      '#suffix' => '</td></tr>',
    );
  }

  if ( $images = spritesheets_image_list() ) {
    $images = array_flip(array_values(array_unique($images)));
    foreach ( $images as $image => $k )
      $images[$image] = array('file' => $image,
        'filesize' => round(filesize($image)/1024, 2) . "kB",
        'preview' => @theme_image(array('path' => '/' . $image, 'attributes' => array('class' => 'preview-image'))));
    $form['images'] = array(
      '#type' => 'fieldset',
      '#title' => t('Images'),
      '#id' => 'spritesheet-images',
      'images' => array(
        '#type' => 'tableselect',
        '#header' => array('file' => 'File', 'filesize' => 'File Size', 'preview' => 'Preview'),
        '#options' => $images,
        '#default_value' => variable_get('spritesheets_images'),
      ),
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save and Compile Spritesheet'),
  );
  return $form;
}

/**
 * Implements hook_form_validate().
 */
function spritesheets_settings_form_validate($form, &$form_state) {
  $values = $form_state['input'];
  foreach ( $values['paths'] as $k => $path ) if ( $path !== '' && !file_exists($path) )
    form_error($form['basic']['paths'][$k], "Path '$path' doesn't exist");
}

/**
 * Implements hook_form_submit().
 */
function spritesheets_settings_form_submit($form, &$form_state) {
  $values = $form_state['input'];

  $images = ($v = @$values['images']) ? $v : array();
  foreach ( $images as $k => $v ) if ( $v == NULL ) unset($images[$k]);

  $paths = ($v = @$values['paths']) ? $v : array();
  foreach ( $paths as $k => $v ) if ( $v == '' ) unset($paths[$k]);

  variable_set('spritesheets_enabled', @$values['enabled']);
  variable_set('spritesheets_paths', $paths);
  variable_set('spritesheets_images', $images);
  variable_set('spritesheets_debug', @$values['debug']);
  variable_set('spritesheets_optimize', @$values['optimize']);

  module_load_include('inc', 'spritesheets');
  spritesheets_compile(true);
}

function spritesheets_spritesheet_path($ext = "png") {
  $folder = file_create_url('public://spritesheets');
  $folder = str_replace('//', '', $folder);
  $folder = substr($folder, strpos($folder, '/') + 1);
  if ( $ext == 'folder' ) return $folder;
  return "$folder/spritesheet.$ext";
}

/**
 * An easy way to check if spritesheets has been enabled and include the inc if so
 */
function _spritesheets_is_enabled() {
  if ( !variable_get('spritesheets_enabled') ) return FALSE;
  module_load_include('inc', 'spritesheets');
  return TRUE;
}

/**
 * Read CSS files in provided directories and return an array of image referenced in them
 *
 * @return
 *  Array of image paths
 *
 */
function spritesheets_image_list() {
  if ( !variable_get('spritesheets_paths') ) return array();
  module_load_include('inc', 'spritesheets');

  $files = array();
  foreach ( variable_get('spritesheets_paths') as $path ) $files = array_merge($files, spritesheets_walk($path, 'css'));
  $images = array();
  foreach ( $files as $file ) {
    $css = file_get_contents($file);
    $css = str_replace(array("\n", "\t"), '', $css);
    $css = preg_replace(array("@ +@", "@/\*.+?\*/@"), " ", $css);
    $css = str_replace("{}", "{ }", $css);
    preg_match_all("@(.+?) *{(.+?)}@", $css, $matches);

    list(, $s, $p) = $matches;
    array_multisort($s, $p);
    foreach ( $s as $k => $selector ) {
      $properties = explode(';', $p[$k]);
      foreach ( $properties as $property ) {
        if ( preg_match("@background(?:-(?:image|position))? ?: ?(?:url\([\"']?(.+?)[\"']?\))?(.*?)$@", $property, $matches) ) {
          list(, $img, $rest) = $matches;
          if ( $img ) {
            if ( $img[0] != '/' ) $img = '/' . substr($file, 0, strrpos($file, '/') + 1) . $img;
            $img = substr($img, 1);
            if ( $img == spritesheets_spritesheet_path() ) continue;
            if ( file_exists($img) ) $images[] = $img;
          }
        }
      }
    }
  }
  return $images;
}

